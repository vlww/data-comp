# -*- coding: utf-8 -*-
"""DataComp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UYHLk0qg56eEASTkGEtNYysZJB_aCl2n
"""

import pandas as pd

NSL_Data = 'https://raw.githubusercontent.com/vlww/DataComp/main/NSL%20Data%20-%20NSL_Regular_Season_Data%20(1).csv?token=GHSAT0AAAAAACO3BFJIZTUVNNH2ARQGETG4ZPADTLA'
NSL_Metadata = 'https://raw.githubusercontent.com/vlww/DataComp/main/NSL%20Data%20-%20NSL_Metadata.csv?token=GHSAT0AAAAAACO3BFJIU3CXUBLRLJHBYNYMZO64RCA'
NSL_Group = 'https://raw.githubusercontent.com/vlww/DataComp/main/NSL%20Data%20-%20NSL_Group_Round_Games.csv?token=GHSAT0AAAAAACO3BFJIEYPS5TG5QVVO4DMWZPADTSA'
matches = pd.read_csv(NSL_Data)
group = pd.read_csv(NSL_Group)

matches["opponent_code"] = matches["AwayTeam"].astype("category").cat.codes

matches["target"] = (matches["HomeResult"] == "W").astype("int")

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators = 50, min_samples_split = 10, random_state = 1)

from sklearn.metrics import accuracy_score

combined = pd.DataFrame(dict(actual = test["target"], prediction = preds))

pd.crosstab(index = combined["actual"], columns = combined["prediction"])

from sklearn.metrics import precision_score

precision_score(test["target"], preds)

grouped_matches = matches.groupby("HomeTeamName")

group = grouped_matches.get_group("Anchorage Avalanche FC")

cols = ["HomeScore", "AwayScore", "Home_xG", "Away_xG", "Home_shots", "Away_shots", "Home_corner", "Away_corner", "Home_PK_Goal", "Away_PK_Goal", "Home_PK_shots", "Away_PK_shots", "Home_ToP"]

matches.sort_values("int_id")

matches["target"] = (group["HomeResult"] == "W").astype("int")

def make_predictions(data, predictors):
  train = data[data["int_id"] < 300]
  test = data[data["int_id"] > 300]
  rf.fit(train[predictors], train["target"])
  preds = rf.predict(test[predictors])
  combined = pd.DataFrame(dict(actual = test["target"], predicted = preds), index = test.index)
  precision = precision_score(test["target"], preds)
  return combined, precision

combined, precision = make_predictions(matches, predictors + cols)

precision

combined = combined.merge(matches[["HomeTeamName", "AwayTeamName", "HomeResult"]], left_index = True, right_index = True)

combined